@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<style>
    .btn-custom {
        border-color: #75BFEC !important;
        color: #75BFEC !important;
    }


    .todo-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }

    .todo-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 2.5rem;
        text-align: center;
        letter-spacing: -0.025em;
    }

    .card {
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.12);
        }

    .card-header {
        padding: 1.25rem;
        border-radius: 10px 10px 0 0;
        background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%);
        color: white;
        font-weight: 600;
    }

    .card-header-light {
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
        color: #2d3748;
    }

    .form-control, .form-select {
        border-radius: 6px;
        border: 1px solid #d1d5db;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

        .form-control:focus, .form-select:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
            outline: none;
        }

    .form-label {
        font-weight: 500;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .btn {
        border-radius: 6px;
        padding: 0.6rem 1.25rem;
        font-weight: 500;
        font-size: 0.95rem;
        transition: all 0.2s ease;
    }


    .btn-outline-primary {
        border-color: #4f46e5;
        color: #4f46e5;
    }

        .btn-outline-primary:hover {
            background: #4f46e5;
            color: white;
        }

    .btn-outline-success {
        border-color: #10b981;
        color: #10b981;
    }

        .btn-outline-success:hover {
            background: #10b981;
            color: white;
        }

    .btn-outline-danger {
        border-color: #ef4444;
        color: #ef4444;
    }

        .btn-outline-danger:hover {
            background: #ef4444;
            color: white;
        }

    .btn-warning {
        background: #f59e0b;
        border-color: #f59e0b;
        color: white;
    }

        .btn-warning:hover {
            background: #d97706;
            border-color: #d97706;
        }

    .btn-outline-secondary {
        border-color: #6b7280;
        color: #6b7280;
    }

        .btn-outline-secondary:hover {
            background: #6b7280;
            color: white;
        }

    .list-group-item {
        border: none;
        border-radius: 8px;
        margin-bottom: 0.75rem;
        padding: 1.25rem;
        background: #ffffff;
        transition: background-color 0.2s ease, transform 0.2s ease;
    }

        .list-group-item:hover {
            background: #f8fafc;
            transform: translateX(4px);
        }

    .badge {
        padding: 0.5rem 1rem;
        border-radius: 1rem;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .modal-content {
        border-radius: 10px;
        border: none;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        border-bottom: 1px solid #e2e8f0;
        background: #f8fafc;
        padding: 1.25rem;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.6);
    }

    .spinner-border {
        width: 2.25rem;
        height: 2.25rem;
        border-width: 0.25em;
    }

    .task-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .task-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1f2937;
    }

    .task-description {
        font-size: 0.9rem;
        color: #6b7280;
        line-height: 1.4;
    }

    .alert-info {
        border-radius: 8px;
        background: #e0f2fe;
        color: #075985;
        padding: 1rem;
    }


    .priority-selector {
        display: flex;
        gap: 0.5rem;
    }

    .priority-option {
        flex: 1;
        text-align: center;
        padding: 0.5rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .priority-option:hover {
            transform: translateY(-2px);
        }

    .priority-1 {
        background: #10b981;
        color: white;
    }

    .priority-2 {
        background: #06b6d4;
        color: white;
    }

    .priority-3 {
        background: #4f46e5;
        color: white;
    }

    .priority-4 {
        background: #f59e0b;
        color: white;
    }

    .priority-5 {
        background: #ef4444;
        color: white;
    }

    .priority-selected {
        box-shadow: 0 0 0 3px rgba(0,0,0,0.1);
        font-weight: bold;
    }

    .last-updated {
        font-size: 0.8rem;
        color: #6b7280;
        margin-left: 0.5rem;
    }

    .add-task-modal .modal-dialog {
        max-width: 600px;
    }

    .tag-input {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        align-items: center;
    }

    .tag {
        background: #e0f2fe;
        color: #075985;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.8rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .tag-remove {
        cursor: pointer;
        font-size: 1rem;
        line-height: 1;
    }

    .tag-input-field {
        flex: 1;
        min-width: 100px;
    }
</style>

<div class="todo-container">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Task Management</h5>
                <button @onclick="ShowAddTaskModal" class="btn btn-sm btn-success">
                    <i class="fas fa-plus me-2"></i>Add Task
                </button>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header card-header-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Active Tasks</h5>
                <span class="badge bg-primary">@activeTasks.Count</span>
            </div>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!activeTasks.Any())
            {
                <div class="alert alert-info">No active tasks found</div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var task in activeTasks)
                    {
                        <div class="list-group-item">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="me-3 flex-grow-1">
                                    <div class="d-flex align-items-center">
                                        <input type="checkbox"
                                               @onchange="@(() => ToggleTaskStatus(task))"
                                               class="form-check-input me-2" />
                                        <span class="task-title">@task.Title</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <div class="task-description mt-1">@task.Description</div>
                                    }
                                    <div class="mt-2 d-flex gap-2 flex-wrap">
                                        <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                            Priority: @task.Priority
                                        </span>
                                        @if (task.DueDate != null)
                                        {
                                            <span class="badge @GetDueDateBadgeClass(task.DueDate)">
                                                Due: @task.DueDate?.ToString("yyyy-MM-dd")
                                            </span>
                                        }
                                        <span class="badge bg-secondary">
                                            Created: @task.CreatedAt.ToString("yyyy-MM-dd")
                                        </span>
                                    </div>
                                </div>
                                <div class="task-actions">
                                    <button @onclick="@(() => EditTask(task))" class="btn btn-sm btn-outline-primary">
                                        Edit
                                    </button>
                                    <button @onclick="@(() => CompleteTask(task))" class="btn btn-sm btn-outline-success">
                                        Complete
                                    </button>
                                    <button @onclick="@(() => ArchiveTask(task))" class="btn btn-sm" style="background-color: transparent; border-color: #75BFEC; color: #75BFEC;">
                                        Archive
                                    </button>
                                    <button @onclick="@(() => DeleteTask(task.Id))" class="btn btn-sm btn-outline-danger">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header card-header-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Completed Tasks</h5>
                <span class="badge bg-success">@completedTasks.Count</span>
            </div>
        </div>
        <div class="card-body">
            @if (!completedTasks.Any())
            {
                <div class="alert alert-info">No completed tasks found</div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var task in completedTasks)
                    {
                        <div class="list-group-item bg-success bg-opacity-10">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="me-3 flex-grow-1">
                                    <div class="d-flex align-items-center">
                                        <input type="checkbox"
                                               checked="@task.IsCompleted"
                                               @onchange="@(() => ToggleTaskStatus(task))"
                                               class="form-check-input me-2" />
                                        <span class="task-title text-decoration-line-through text-success">
                                            @task.Title
                                        </span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <div class="task-description mt-1">@task.Description</div>
                                    }
                                    <div class="mt-2 d-flex gap-2 flex-wrap">
                                        <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                            Priority: @task.Priority
                                        </span>
                                        @if (task.DueDate != null)
                                        {
                                            <span class="badge @GetDueDateBadgeClass(task.DueDate)">
                                                Due: @task.DueDate?.ToString("yyyy-MM-dd")
                                            </span>
                                        }
                                        <span class="badge bg-secondary">
                                            Created: @task.CreatedAt.ToString("yyyy-MM-dd")
                                        </span>
                                        <span class="badge bg-success">
                                            Completed: @task.CompletedDate?.ToString("yyyy-MM-dd")
                                        </span>
                                    </div>
                                </div>
                                <div class="task-actions">
                                    <button @onclick="@(() => ReopenTask(task))" class="btn btn-sm btn-outline-secondary">
                                        Reopen
                                    </button>
                                    <button @onclick="@(() => ArchiveTask(task))" class="btn btn-sm" style="background-color: transparent; border-color: #75BFEC; color: #75BFEC;">
                                        Archive
                                    </button>
                                    <button @onclick="@(() => DeleteTask(task.Id))" class="btn btn-sm btn-outline-danger">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="card">
        <div class="card-header card-header-light">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Archived Tasks</h5>
                <span class="badge bg-secondary">@archivedTasks.Count</span>
            </div>
        </div>
        <div class="card-body">
            @if (!archivedTasks.Any())
            {
                <div class="alert alert-info">No archived tasks found</div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var task in archivedTasks)
                    {
                        <div class="list-group-item bg-light">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="me-3 flex-grow-1">
                                    <span class="task-title @(task.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                        @task.Title
                                    </span>
                                    @if (!string.IsNullOrEmpty(task.Description))
                                    {
                                        <div class="task-description mt-1">@task.Description</div>
                                    }
                                    <div class="mt-2 d-flex gap-2 flex-wrap">
                                        <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                            Priority: @task.Priority
                                        </span>
                                        @if (task.DueDate != null)
                                        {
                                            <span class="badge @GetDueDateBadgeClass(task.DueDate)">
                                                Due: @task.DueDate?.ToString("yyyy-MM-dd")
                                            </span>
                                        }
                                        <span class="badge bg-secondary">
                                            Created: @task.CreatedAt.ToString("yyyy-MM-dd")
                                        </span>
                                        <span class="badge bg-dark">
                                            Archived: @task.ArchivedDate?.ToString("yyyy-MM-dd")
                                        </span>
                                    </div>
                                </div>
                                <div class="task-actions">
                                    @if (task.IsCompleted)
                                    {
                                        <button @onclick="@(() => ReopenTask(task))" class="btn btn-sm btn-outline-secondary">
                                            Reopen
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(() => CompleteTask(task))" class="btn btn-sm btn-outline-success">
                                            Complete
                                        </button>
                                    }
                                    <button @onclick="@(() => UnarchiveTask(task))" class="btn btn-sm btn-outline-success">
                                        Unarchive
                                    </button>
                                    <button @onclick="@(() => DeleteTask(task.Id))" class="btn btn-sm btn-outline-danger">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>


    @if (showAddTaskModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-dialog-centered add-task-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Task</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddTaskModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-4">
                            <label class="form-label">Title*</label>
                            <input @bind="newTask.Title" class="form-control" />
                            @if (string.IsNullOrEmpty(newTask.Title))
                            {
                                <small class="text-danger mt-1 d-block">Title is required</small>
                            }
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea @bind="newTask.Description" class="form-control" rows="4"></textarea>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Priority*</label>
                            <div class="priority-selector">
                                @foreach (var priority in Enumerable.Range(1, 5))
                                {
                                    <div class="priority-option priority-@priority @(newTask.Priority == priority ? "priority-selected" : "")"
                                         @onclick="@(() => newTask.Priority = priority)">
                                        @priority
                                    </div>
                                }
                            </div>
                            @if (newTask.Priority < 1 || newTask.Priority > 5)
                            {
                                <small class="text-danger mt-1 d-block">Priority must be between 1 and 5</small>
                            }
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Due Date</label>
                            <input type="date" @bind="newTask.DueDate" class="form-control" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="CloseAddTaskModal" class="btn btn-outline-secondary">Cancel</button>
                        <button @onclick="AddTask" class="btn btn-primary"
                                disabled="@(!IsValidNewTask())">
                            Add Task
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showEditModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Task</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-4">
                            <label class="form-label">Title*</label>
                            <input @bind="editTask.Title" class="form-control" />
                            @if (string.IsNullOrEmpty(editTask.Title))
                            {
                                <small class="text-danger mt-1 d-block">Title is required</small>
                            }
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Description</label>
                            <textarea @bind="editTask.Description" class="form-control" rows="4"></textarea>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Priority*</label>
                                <input type="number" @bind="editTask.Priority" class="form-control" min="1" max="5" />
                                @if (editTask.Priority < 1 || editTask.Priority > 5)
                                {
                                    <small class="text-danger mt-1 d-block">Priority must be between 1 and 5</small>
                                }
                            </div>
                            <div class="col-md-6 mb-4">
                                <label class="form-label">Due Date</label>
                                <input type="date" @bind="editTask.DueDate" class="form-control" />
                            </div>
                        </div>
                        <div class="form-check mb-4">
                            <input type="checkbox" @bind="editTask.IsCompleted" class="form-check-input" id="completedCheck" />
                            <label class="form-check-label" for="completedCheck">Completed</label>
                        </div>
                        <div class="form-check mb-4">
                            <input type="checkbox" @bind="editTask.IsArchived" class="form-check-input" id="archivedCheck" />
                            <label class="form-check-label" for="archivedCheck">Archived</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="CloseEditModal" class="btn btn-outline-secondary">Cancel</button>
                        <button @onclick="SaveTask" class="btn btn-primary"
                                disabled="@(!IsValidEditTask())">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; } = 3;
        public bool IsCompleted { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.Now;
        public DateTime? DueDate { get; set; }
        public bool IsArchived { get; set; }
        public DateTime? ArchivedDate { get; set; }
        public DateTime? CompletedDate { get; set; }
        public List<string> Tags { get; set; } = new();
    }

    private class NewTaskDto
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; } = 3;
        public DateTime? DueDate { get; set; }
        public List<string> Tags { get; set; } = new();
    }

    private class EditTaskDto
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; }
        public DateTime? DueDate { get; set; }
        public bool IsCompleted { get; set; }
        public bool IsArchived { get; set; }
        public DateTime? CompletedDate { get; set; }
        public DateTime? ArchivedDate { get; set; }
    }

    private List<TaskItem> allTasks = new();
    private NewTaskDto newTask = new();
    private EditTaskDto editTask = new();
    private bool showAddTaskModal = false;
    private bool showEditModal = false;
    private bool isLoading = false;
    private int? currentTaskId = null;
    private string newTag = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private bool IsValidNewTask()
    {
        return !string.IsNullOrEmpty(newTask.Title) &&
               newTask.Priority >= 1 &&
               newTask.Priority <= 5;
    }

    private bool IsValidEditTask()
    {
        return !string.IsNullOrEmpty(editTask.Title) &&
               editTask.Priority >= 1 &&
               editTask.Priority <= 5;
    }

    private async Task LoadTasks()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allTasks = await Http.GetFromJsonAsync<List<TaskItem>>("https://localhost:7278/api/Task/GetAllTasks") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<TaskItem> activeTasks => allTasks
        .Where(t => !t.IsCompleted && !t.IsArchived)
        .OrderBy(t => t.Priority)
        .ThenBy(t => t.DueDate ?? DateTime.MaxValue)
        .ToList();

    private List<TaskItem> completedTasks => allTasks
        .Where(t => t.IsCompleted && !t.IsArchived)
        .OrderByDescending(t => t.CompletedDate ?? DateTime.MinValue)
        .ToList();

    private List<TaskItem> archivedTasks => allTasks
        .Where(t => t.IsArchived)
        .OrderByDescending(t => t.ArchivedDate ?? DateTime.MinValue)
        .ToList();



    private void ShowAddTaskModal()
    {
        newTask = new NewTaskDto();
        showAddTaskModal = true;
    }

    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
    }

    private async Task AddTask()
    {
        if (!IsValidNewTask()) return;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7278/api/Task/AddTask", newTask);
            if (response.IsSuccessStatusCode)
            {
                newTask = new NewTaskDto();
                showAddTaskModal = false;
                await LoadTasks();
                ToastService.ShowSuccess("Task Added Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding task: {ex.Message}");
        }
    }

    private void HandleTagInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTag))
        {
            if (!newTask.Tags.Contains(newTag))
            {
                newTask.Tags.Add(newTag);
            }
            newTag = string.Empty;
        }
    }

    private void RemoveTag(string tag)
    {
        newTask.Tags.Remove(tag);
    }

    private void EditTask(TaskItem task)
    {
        currentTaskId = task.Id;
        editTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = task.IsCompleted,
                IsArchived = task.IsArchived,
                CompletedDate = task.CompletedDate
            };
        showEditModal = true;
        ToastService.ShowWarning($"{task.Title} Task Edited Succesfully!");
    }

    private async Task SaveTask()
    {
        if (!IsValidEditTask() || !currentTaskId.HasValue) return;

        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7278/api/Task/UpdateTask/{currentTaskId}", editTask);
            if (response.IsSuccessStatusCode)
            {
                showEditModal = false;
                await LoadTasks();
                ToastService.ShowSuccess("Task Saved Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
        }
    }

    private async Task DeleteTask(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7278/api/Task/DeleteTask/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTasks();
                ToastService.ShowError("Task Deleted Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    private async Task ToggleTaskStatus(TaskItem task)
    {
        var updatedTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = !task.IsCompleted,
                IsArchived = task.IsArchived,
                CompletedDate = !task.IsCompleted ? DateTime.Now : null
            };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task CompleteTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = true,
                IsArchived = task.IsArchived,
                CompletedDate = DateTime.Now
            };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task ReopenTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = false,
                IsArchived = task.IsArchived,
                CompletedDate = null
            };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task ArchiveTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = task.IsCompleted,
                IsArchived = true,
                ArchivedDate = DateTime.Now
            };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task UnarchiveTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
            {
                Title = task.Title,
                Description = task.Description,
                Priority = task.Priority,
                DueDate = task.DueDate,
                IsCompleted = task.IsCompleted,
                IsArchived = false,
                ArchivedDate = null
            };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task UpdateTask(int id, EditTaskDto updatedTask)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7278/api/Task/UpdateTask/{id}", updatedTask);
            if (response.IsSuccessStatusCode)
            {
                await LoadTasks();
                ToastService.ShowWarning("Task Updated Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
        }
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        currentTaskId = null;
    }

    private string GetPriorityBadgeClass(int priority)
    {
        return priority switch
        {
            1 => "bg-danger",
            2 => "bg-warning",
            3 => "bg-primary",
            4 => "bg-info",
            5 => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateBadgeClass(DateTime? dueDate)
    {
        if (!dueDate.HasValue) return "bg-secondary";

        if (dueDate.Value.Date < DateTime.Today)
            return "bg-danger";
        if (dueDate.Value.Date == DateTime.Today)
            return "bg-warning";
        if (dueDate.Value.Date <= DateTime.Today.AddDays(3))
            return "bg-info";
        return "bg-secondary";
    }
}
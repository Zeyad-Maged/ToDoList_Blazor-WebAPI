@page "/home/{UserAuthId:int}"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.WebUtilities

<div style="display: flex; justify-content: flex-end; align-items: center; margin-bottom: 1.5rem;">
    <button class="logout-btn" style="margin: 0;" @onclick="Logout">
        <span class="bi bi-box-arrow-right"></span> Logout
    </button>
</div>

<div class="todo-container" @onclick="CloseAllMenus">
    <div class="todo-header">
        <h1 class="sofco-title">SOfCO</h1>
    </div>
    <div class="todo-section add-task-section" style="background: var(--card-bg); box-shadow: var(--shadow); border-radius: 16px; margin-bottom: 2rem;">
        <h4 class="section-title">Add Task</h4>
        <div class="add-task-inline" role="form" aria-label="Add new task" style="background: #f8fbff; border-radius: 12px; box-shadow: 0 2px 8px rgba(96, 165, 250, 0.08); padding: 2rem 1.5rem; border: 1px solid var(--border);">
            <input @bind="newTask.Title" class="form-control add-task-input" placeholder="Task title*" aria-label="Task title input" @onkeydown="@(async e => await HandleAddTaskKeyDown(e))" />
            <select @bind="newTask.Priority" class="form-select add-task-priority" aria-label="Task priority select" @onkeydown="@(async e => await HandleAddTaskKeyDown(e))">
                <option value="" disabled selected>Select priority*</option>
                <option value="1">1 (Highest)</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5 (Lowest)</option>
            </select>
            <button class="btn btn-link add-task-more-btn" type="button" @onclick="() => showMoreOptions = !showMoreOptions" aria-label="@(showMoreOptions ? "Hide more options" : "Show more options")">
                <i class="fas fa-chevron-@(showMoreOptions ? "up" : "down")"></i> @(showMoreOptions ? "Hide Options" : "More Options")
            </button>
            <button class="btn btn-primary add-task-submit" type="button" @onclick="AddTask" disabled="@(!IsValidNewTask())" aria-label="Add task">
                Add Task
            </button>
        </div>
        @if (showMoreOptions)
        {
            <div class="add-task-more-options" style="background: #f0f4ff; border-radius: 10px; box-shadow: 0 2px 8px rgba(96, 165, 250, 0.08); border: 1px solid var(--border); margin-top: 1.5rem;">
                <input @bind="newTask.Description" class="form-control add-task-desc" placeholder="Description" aria-label="Task description input" />
                <div class="form-check add-task-range-check">
                    <input type="checkbox" class="form-check-input" id="dueTodayCheck" @bind="dueTodayChecked" aria-label="Set due date to today" />
                    <label class="form-check-label" for="dueTodayCheck">Due Today</label>
                </div>
                <input type="date" @bind="newTask.DueDate" class="form-control add-task-date" aria-label="Task due date input" disabled="@dueTodayChecked" />
                @if (dueDateValidationMessage != null)
                {
                    <div class="text-danger" style="font-size:0.95rem;">@dueDateValidationMessage</div>
                }
            </div>
        }
    </div>
    <div class="todo-section">
        <h4 class="section-title">Today</h4>
        <div class="task-list" role="list" aria-label="Today's tasks list">
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading tasks...</span>
                    </div>
                </div>
            }
            else
            {
                var todayTasks = allTasks.Where(t => t.DueDate != null && t.DueDate.Value.Date == DateTime.Today && !t.IsArchived).OrderBy(t => t.Priority).ToList();
                if (!todayTasks.Any())
                {
                    <div class="alert alert-info" role="alert">No tasks due today!</div>
                }
                else
                {
                    @foreach (var task in todayTasks)
                    {
                        <div class="task-list-item @(task.IsCompleted ? "completed" : "")" role="listitem" aria-label="@task.Title">
                            <input type="checkbox" class="task-checkbox" checked="@task.IsCompleted" disabled="@task.IsArchived" @onchange="@(() => ToggleTaskStatus(task))" aria-label="Toggle task completion for @task.Title" />
                            <div class="task-main">
                                <span class="task-title">@task.Title</span>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <span class="task-desc">@task.Description</span>
                                }
                                <div class="task-meta">
                                    <span class="task-priority priority-@task.Priority">Priority: @task.Priority</span>
                                    <span class="task-due">Due: Today</span>
                                    @if (task.IsCompleted)
                                    {
                                        <span class="task-completed">Completed: @task.CompletedDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    @foreach (var tag in task.Tags)
                                    {
                                        <span class="tag">@tag <i class="fas fa-times tag-remove" @onclick="() => RemoveTag(task, tag)" aria-label="Remove tag @tag"></i></span>
                                    }
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="icon-btn icon-btn-menu" @onclick:stopPropagation @onclick="() => ToggleMenu(task.Id)" aria-label="More actions for @task.Title" tabindex="0">
                                    <i class="fas fa-ellipsis-v" aria-hidden="true"></i>
                                </button>
                                @if (openMenuTaskId == task.Id)
                                {
                                    <div class="task-menu-dropdown" @onclick:stopPropagation>
                                        <button class="dropdown-item" @onclick="() => StartEditTask(task)"><i class="fas fa-edit"></i> Edit</button>
                                        @if (!task.IsArchived)
                                        {
                                            <button class="dropdown-item" @onclick="() => CompleteTask(task)"><i class="fas fa-check"></i> @(task.IsCompleted ? "Reopen" : "Complete")</button>
                                            <button class="dropdown-item" @onclick="() => ArchiveTask(task)"><i class="fas fa-archive"></i> Archive</button>
                                        }
                                        else
                                        {
                                            <button class="dropdown-item" @onclick="() => UnarchiveTask(task)"><i class="fas fa-box-open"></i> Unarchive</button>
                                        }
                                        <button class="dropdown-item" @onclick="() => DeleteTask(task.Id)"><i class="fas fa-trash"></i> Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
    <div class="todo-section">
        <h4 class="section-title">All Tasks</h4>
        <div class="task-list" role="list" aria-label="All tasks list">
            @if (isLoading)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading tasks...</span>
                    </div>
                </div>
            }
            else if (!allTasks.Any())
            {
                <div class="alert alert-info" role="alert">No tasks found. Start by adding a new task!</div>
            }
            else
            {
                if (activeTasks.Any())
                {
                    <div class="task-group-label">Active Tasks</div>
                    @foreach (var task in activeTasks)
                    {
                        <div class="task-list-item @(task.IsCompleted ? "completed" : "") @(task.IsArchived ? "archived" : "")" role="listitem" aria-label="@task.Title">
                            <input type="checkbox" class="task-checkbox" checked="@task.IsCompleted" disabled="@task.IsArchived" @onchange="@(() => ToggleTaskStatus(task))" aria-label="Toggle task completion for @task.Title" />
                            <div class="task-main">
                                <span class="task-title">@task.Title</span>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <span class="task-desc">@task.Description</span>
                                }
                                <div class="task-meta">
                                    <span class="task-priority priority-@task.Priority">Priority: @task.Priority</span>
                                    @if (task.DueDate != null)
                                    {
                                        <span class="task-due">Due: @task.DueDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    @if (task.IsCompleted)
                                    {
                                        <span class="task-completed">Completed: @task.CompletedDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    @if (task.IsArchived)
                                    {
                                        <span class="task-archived">Archived: @task.ArchivedDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    @foreach (var tag in task.Tags)
                                    {
                                        <span class="tag">@tag <i class="fas fa-times tag-remove" @onclick="() => RemoveTag(task, tag)" aria-label="Remove tag @tag"></i></span>
                                    }
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="icon-btn icon-btn-menu" @onclick:stopPropagation @onclick="() => ToggleMenu(task.Id)" aria-label="More actions for @task.Title" tabindex="0">
                                    <i class="fas fa-ellipsis-v" aria-hidden="true"></i>
                                </button>
                                @if (openMenuTaskId == task.Id)
                                {
                                    <div class="task-menu-dropdown" @onclick:stopPropagation>
                                        <button class="dropdown-item" @onclick="() => StartEditTask(task)"><i class="fas fa-edit"></i> Edit</button>
                                        @if (!task.IsArchived)
                                        {
                                            <button class="dropdown-item" @onclick="() => CompleteTask(task)"><i class="fas fa-check"></i> @(task.IsCompleted ? "Reopen" : "Complete")</button>
                                            <button class="dropdown-item" @onclick="() => ArchiveTask(task)"><i class="fas fa-archive"></i> Archive</button>
                                        }
                                        else
                                        {
                                            <button class="dropdown-item" @onclick="() => UnarchiveTask(task)"><i class="fas fa-box-open"></i> Unarchive</button>
                                        }
                                        <button class="dropdown-item" @onclick="() => DeleteTask(task.Id)"><i class="fas fa-trash"></i> Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                if (completedTasks.Any())
                {
                    <div class="task-group-label">Completed Tasks</div>
                    @foreach (var task in completedTasks)
                    {
                        <div class="task-list-item completed" role="listitem" aria-label="@task.Title">
                            <input type="checkbox" class="task-checkbox" checked="@task.IsCompleted" @onchange="@(() => ToggleTaskStatus(task))" aria-label="Toggle task completion for @task.Title" />
                            <div class="task-main">
                                <span class="task-title">@task.Title</span>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <span class="task-desc">@task.Description</span>
                                }
                                <div class="task-meta">
                                    <span class="task-priority priority-@task.Priority">Priority: @task.Priority</span>
                                    @if (task.DueDate != null)
                                    {
                                        <span class="task-due">Due: @task.DueDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    <span class="task-completed">Completed: @task.CompletedDate?.ToString("MMM dd, yyyy")</span>
                                    @foreach (var tag in task.Tags)
                                    {
                                        <span class="tag">@tag <i class="fas fa-times tag-remove" @onclick="() => RemoveTag(task, tag)" aria-label="Remove tag @tag"></i></span>
                                    }
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="icon-btn icon-btn-menu" @onclick:stopPropagation @onclick="() => ToggleMenu(task.Id)" aria-label="More actions for @task.Title" tabindex="0">
                                    <i class="fas fa-ellipsis-v" aria-hidden="true"></i>
                                </button>
                                @if (openMenuTaskId == task.Id)
                                {
                                    <div class="task-menu-dropdown" @onclick:stopPropagation>
                                        <button class="dropdown-item" @onclick="() => StartEditTask(task)"><i class="fas fa-edit"></i> Edit</button>
                                        <button class="dropdown-item" @onclick="() => ReopenTask(task)"><i class="fas fa-undo"></i> Reopen</button>
                                        <button class="dropdown-item" @onclick="() => ArchiveTask(task)"><i class="fas fa-archive"></i> Archive</button>
                                        <button class="dropdown-item" @onclick="() => DeleteTask(task.Id)"><i class="fas fa-trash"></i> Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                if (archivedTasks.Any())
                {
                    <div class="task-group-label">Archived Tasks</div>
                    @foreach (var task in archivedTasks)
                    {
                        <div class="task-list-item archived" role="listitem" aria-label="@task.Title">
                            <input type="checkbox" class="task-checkbox" checked="@task.IsCompleted" disabled aria-label="Task completion status for @task.Title" />
                            <div class="task-main">
                                <span class="task-title">@task.Title</span>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <span class="task-desc">@task.Description</span>
                                }
                                <div class="task-meta">
                                    <span class="task-priority priority-@task.Priority">Priority: @task.Priority</span>
                                    @if (task.DueDate != null)
                                    {
                                        <span class="task-due">Due: @task.DueDate?.ToString("MMM dd, yyyy")</span>
                                    }
                                    <span class="task-archived">Archived: @task.ArchivedDate?.ToString("MMM dd, yyyy")</span>
                                    @foreach (var tag in task.Tags)
                                    {
                                        <span class="tag">@tag <i class="fas fa-times tag-remove" @onclick="() => RemoveTag(task, tag)" aria-label="Remove tag @tag"></i></span>
                                    }
                                </div>
                            </div>
                            <div class="task-actions">
                                <button class="icon-btn icon-btn-menu" @onclick:stopPropagation @onclick="() => ToggleMenu(task.Id)" aria-label="More actions for @task.Title" tabindex="0">
                                    <i class="fas fa-ellipsis-v" aria-hidden="true"></i>
                                </button>
                                @if (openMenuTaskId == task.Id)
                                {
                                    <div class="task-menu-dropdown" @onclick:stopPropagation>
                                        <button class="dropdown-item" @onclick="() => StartEditTask(task)"><i class="fas fa-edit"></i> Edit</button>
                                        <button class="dropdown-item" @onclick="() => UnarchiveTask(task)"><i class="fas fa-box-open"></i> Unarchive</button>
                                        <button class="dropdown-item" @onclick="() => DeleteTask(task.Id)"><i class="fas fa-trash"></i> Delete</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
    @if (showEditModal)
    {
        <div class="modal show d-block" tabindex="-1" role="dialog" aria-labelledby="editTaskModal" style="background-color: rgba(0,0,0,0.5)">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editTaskModal">Edit Task</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label" for="editTaskTitle">Title*</label>
                            <input @bind="editTask.Title" class="form-control" id="editTaskTitle" aria-required="true" />
                            @if (string.IsNullOrEmpty(editTask.Title))
                            {
                                <small class="text-danger mt-1 d-block">Title is required</small>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="editTaskDescription">Description</label>
                            <textarea @bind="editTask.Description" class="form-control" rows="4" id="editTaskDescription"></textarea>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="editTaskPriority">Priority*</label>
                                <select @bind="editTask.Priority" class="form-select" id="editTaskPriority" aria-required="true">
                                    <option value="1">1 (Highest)</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5 (Lowest)</option>
                                </select>
                                @if (editTask.Priority < 1 || editTask.Priority > 5)
                                {
                                    <small class="text-danger mt-1 d-block">Priority must be between 1 and 5</small>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="editTaskDueDate">Due Date</label>
                                <input type="date" @bind="editTask.DueDate" class="form-control" id="editTaskDueDate" />
                            </div>
                        </div>
                        <div class="form-check mb-3">
                            <input type="checkbox" @bind="editTask.IsCompleted" class="form-check-input" id="completedCheck" aria-label="Mark task as completed" />
                            <label class="form-check-label" for="completedCheck">Completed</label>
                        </div>
                        <div class="form-check mb-3">
                            <input type="checkbox" @bind="editTask.IsArchived" class="form-check-input" id="archivedCheck" aria-label="Mark task as archived" />
                            <label class="form-check-label" for="archivedCheck">Archived</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="CloseEditModal" class="btn btn-outline-secondary" aria-label="Cancel edit">Cancel</button>
                        <button @onclick="SaveTask" class="btn btn-primary" disabled="@(!IsValidEditTask())" aria-label="Save task changes">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; } = 3;
        public bool IsCompleted { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.Now;
        public DateTime? DueDate { get; set; }
        public bool IsArchived { get; set; }
        public DateTime? ArchivedDate { get; set; }
        public DateTime? CompletedDate { get; set; }
        public List<string> Tags { get; set; } = new();
    }

    private class NewTaskDto
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; } = 0;
        public DateTime? DueDate { get; set; }
        public int? RangeValue { get; set; }
    }

    private class EditTaskDto
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int Priority { get; set; }
        public DateTime? DueDate { get; set; }
        public bool IsCompleted { get; set; }
        public bool IsArchived { get; set; }
        public DateTime? CompletedDate { get; set; }
        public DateTime? ArchivedDate { get; set; }
        public List<string> Tags { get; set; } = new();
    }

    private List<TaskItem> allTasks = new();
    private NewTaskDto newTask = new();
    private EditTaskDto editTask = new();
    private bool showEditModal = false;
    private bool isLoading = false;
    private int? currentTaskId = null;
    private int? openMenuTaskId = null;
    private bool showRange = false;
    private bool showMoreOptions = false;
    private bool _dueTodayChecked = false;
    private bool dueTodayChecked
    {
        get => _dueTodayChecked;
        set
        {
            if (_dueTodayChecked != value)
            {
                _dueTodayChecked = value;
                if (_dueTodayChecked)
                {
                    newTask.DueDate = DateTime.Today;
                }
            }
        }
    }
    private string? dueDateValidationMessage = null;

    [Parameter]
    public int UserAuthId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private bool IsValidNewTask()
    {
        dueDateValidationMessage = null;
        if (string.IsNullOrWhiteSpace(newTask.Title) || newTask.Priority < 1 || newTask.Priority > 5)
            return false;
        if (dueTodayChecked)
        {
            if (newTask.DueDate == null || newTask.DueDate.Value.Date != DateTime.Today)
            {
                dueDateValidationMessage = "Due date must be today.";
                return false;
            }
        }
        else if (newTask.DueDate != null)
        {
            if (newTask.DueDate.Value.Date < DateTime.Today)
            {
                dueDateValidationMessage = "Due date cannot be in the past.";
                return false;
            }
        }
        return true;
    }

    private bool IsValidEditTask()
    {
        return !string.IsNullOrEmpty(editTask.Title) &&
               editTask.Priority >= 1 &&
               editTask.Priority <= 5;
    }

    private async Task LoadTasks()
    {
        if (UserAuthId == 0) return;
        isLoading = true;
        StateHasChanged();

        try
        {
            allTasks = await Http.GetFromJsonAsync<List<TaskItem>>($"https://localhost:7278/api/Task/GetAllTasks?UserAuthId={UserAuthId}") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
            ToastService.ShowError($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private List<TaskItem> activeTasks => allTasks
        .Where(t => !t.IsCompleted && !t.IsArchived && (t.DueDate == null || t.DueDate.Value.Date != DateTime.Today))
        .OrderBy(t => t.Priority)
        .ThenBy(t => t.DueDate ?? DateTime.MaxValue)
        .ToList();

    private List<TaskItem> completedTasks => allTasks
        .Where(t => t.IsCompleted && !t.IsArchived)
        .OrderByDescending(t => t.CompletedDate ?? DateTime.MinValue)
        .ToList();

    private List<TaskItem> archivedTasks => allTasks
        .Where(t => t.IsArchived)
        .OrderByDescending(t => t.ArchivedDate ?? DateTime.MinValue)
        .ToList();

    private void StartEditTask(TaskItem task)
    {
        currentTaskId = task.Id;
        editTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = task.IsCompleted,
            IsArchived = task.IsArchived,
            CompletedDate = task.CompletedDate,
            Tags = new List<string>(task.Tags)
        };
        showEditModal = true;
    }

    private async Task AddTask()
    {
        if (!IsValidNewTask() || UserAuthId == 0) return;

        try
        {
            var response = await Http.PostAsJsonAsync($"https://localhost:7278/api/Task/AddTask?UserAuthId={UserAuthId}", newTask);
            if (response.IsSuccessStatusCode)
            {
                newTask = new NewTaskDto();
                showMoreOptions = false;
                showRange = false;
                await LoadTasks();
                ToastService.ShowSuccess("Task Added Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding task: {ex.Message}");
            ToastService.ShowError($"Error adding task: {ex.Message}");
        }
    }

    private async Task SaveTask()
    {
        if (!IsValidEditTask() || !currentTaskId.HasValue) return;

        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7278/api/Task/UpdateTask/{currentTaskId}", editTask);
            if (response.IsSuccessStatusCode)
            {
                showEditModal = false;
                await LoadTasks();
                ToastService.ShowSuccess("Task Saved Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
            ToastService.ShowError($"Error updating task: {ex.Message}");
        }
    }

    private async Task DeleteTask(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7278/api/Task/DeleteTask/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTasks();
                ToastService.ShowError("Task Deleted Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
            ToastService.ShowError($"Error deleting task: {ex.Message}");
        }
    }

    private async Task ToggleTaskStatus(TaskItem task)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = !task.IsCompleted,
            IsArchived = task.IsArchived,
            CompletedDate = !task.IsCompleted ? DateTime.Now : null,
            Tags = new List<string>(task.Tags)
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task CompleteTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = true,
            IsArchived = task.IsArchived,
            CompletedDate = DateTime.Now,
            Tags = new List<string>(task.Tags)
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task ReopenTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = false,
            IsArchived = task.IsArchived,
            CompletedDate = null,
            Tags = new List<string>(task.Tags)
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task ArchiveTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = task.IsCompleted,
            IsArchived = true,
            ArchivedDate = DateTime.Now,
            Tags = new List<string>(task.Tags)
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task UnarchiveTask(TaskItem task)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = task.IsCompleted,
            IsArchived = false,
            ArchivedDate = null,
            Tags = new List<string>(task.Tags)
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private async Task UpdateTask(int id, EditTaskDto updatedTask)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7278/api/Task/UpdateTask/{id}", updatedTask);
            if (response.IsSuccessStatusCode)
            {
                await LoadTasks();
                ToastService.ShowWarning("Task Updated Successfully!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
            ToastService.ShowError($"Error updating task: {ex.Message}");
        }
    }

    private async Task RemoveTag(TaskItem task, string tag)
    {
        var updatedTask = new EditTaskDto
        {
            Title = task.Title,
            Description = task.Description,
            Priority = task.Priority,
            DueDate = task.DueDate,
            IsCompleted = task.IsCompleted,
            IsArchived = task.IsArchived,
            CompletedDate = task.CompletedDate,
            ArchivedDate = task.ArchivedDate,
            Tags = task.Tags.Where(t => t != tag).ToList()
        };

        await UpdateTask(task.Id, updatedTask);
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        currentTaskId = null;
    }

    private void ToggleMenu(int taskId)
    {
        if (openMenuTaskId == taskId)
            openMenuTaskId = null;
        else
            openMenuTaskId = taskId;
    }

    private void CloseAllMenus()
    {
        openMenuTaskId = null;
    }

    private async Task HandleAddTaskKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (IsValidNewTask())
            {
                await AddTask();
            }
            else
            {
                ToastService.ShowError("Please fill in a title and select a priority between 1 and 5.");
            }
        }
    }
    private async Task Logout()
    {
        Navigation.NavigateTo("/login", true);
    }
}
@page "/login"
@page "/"
@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject IJSRuntime JS

<div class="auth-page">
    <div class="auth-container">
        <div class="auth-card" role="form" aria-label="Login form">
            <div class="auth-header">
                <h1 class="sofco-title">SOfCO</h1>
                <h2>Sign in to your account</h2>
                <p>Access your account today!</p>
            </div>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" aria-label="Email address" aria-describedby="email-error" data-testid="email-input" />
                    <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" id="email-error" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" aria-label="Password" aria-describedby="password-error" data-testid="password-input" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" id="password-error" />
                </div>

                @if (isSubmitting)
                {
                    <button type="button" class="btn btn-primary w-100 d-flex justify-content-center align-items-center opacity-75" aria-disabled="true" data-testid="submit-button-loading">
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Signing In...
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary w-100" aria-label="Sign in" data-testid="submit-button">
                        Sign In
                    </button>
                }
            </EditForm>

            <p class="auth-footer">
                Don't have an account? <a href="/signup">Sign up</a>
            </p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {
        isSubmitting = true;
        try
        {
            var response = await Http.PostAsJsonAsync(
                "https://localhost:7278/api/Authentication/login",
                loginModel
            );

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && result.UserAuthId > 0)
                {
                    ToastService.ShowSuccess("Logged in successfully!");
                    Navigation.NavigateTo($"/home/{result.UserAuthId}");
                }
                else
                {
                    ToastService.ShowError("Invalid server response. Please try again.");
                }
            }
            else
            {
                ToastService.ShowError("Invalid Email or Password.");
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("An error occurred. Please try again later.");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        ToastService.ShowError("Invalid data submitted. Please check the form and try again.");
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public int UserAuthId { get; set; }
    }
}

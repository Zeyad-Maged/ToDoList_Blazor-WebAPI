@page "/login"
@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject IJSRuntime JS

<div class="auth-page">
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <h1 class="sofco-title">SOfCO</h1>
                <h2>Sign in to your account</h2>
                <p>Access your account today!</p>
            </div>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
                    @(isSubmitting ? "Signing In..." : "Sign In")
                </button>
            </EditForm>

            <p class="auth-footer">
                Don't have an account? <a href="/signup">Sign up</a>
            </p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        @* var token = await JS.InvokeAsync<string>("sessionStorage.getItem", "access_token");
        var userId = await JS.InvokeAsync<string>("sessionStorage.getItem", "user_id");

        if (!string.IsNullOrWhiteSpace(token))
        {
            Navigation.NavigateTo($"/home/{userId}", true);
        } *@
    }

    private async Task HandleLogin()
    {
        isSubmitting = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Authentication/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                await JS.InvokeVoidAsync("sessionStorage.setItem", "access_token", result.AccessToken);
                await JS.InvokeVoidAsync("sessionStorage.setItem", "user_id", result.UserAuthId.ToString());

                Navigation.NavigateTo($"/home/{result.UserAuthId}", true);
            }
            else
            {
                ToastService.ShowError("Invalid email or password.");
            }
        }
        catch
        {
            ToastService.ShowError("Something went wrong.");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public Guid UserAuthId { get; set; }
        public string AccessToken { get; set; } = string.Empty;
    }
}

@page "/signup"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Blazored.Toast.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<style>
    .custom-dropdown {
        position: relative;
        font-family: inherit;
    }

    .custom-dropdown-toggle {
        cursor: pointer;
        padding: 0.5rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        background-color: #fff;
        display: flex;
        align-items: center;
        justify-content: space-between;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

        .custom-dropdown-toggle:hover {
            border-color: #084298;
        }

        .custom-dropdown-toggle:focus {
            outline: none;
            border-color: #084298;
            box-shadow: 0 0 0 0.2rem rgba(8, 66, 152, 0.25);
        }

    .custom-dropdown-menu {
        position: absolute;
        top: 100%;
        left: 0;
        width: 300px; /* 👈 specify desired width here */
        max-height: 400px;
        overflow-y: auto;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        z-index: 999;
        padding: 0.25rem 0;
    }


    .custom-dropdown-item {
        padding: 0.5rem 0.75rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: background-color 0.2s;
    }

        .custom-dropdown-item:hover,
        .custom-dropdown-item:focus {
            background-color: #e7f1ff;
        }

    .flag-img {
        display: inline-block;
        vertical-align: middle;
        margin-right: 0.5rem;
        width: 24px;
        height: 18px;
    }

    .search-input {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: none;
        border-bottom: 1px solid #ced4da;
        outline: none;
    }

        .search-input:focus {
            border-color: #084298;
        }
</style>

<div class="auth-page" @onclick="CloseAllDropdowns">
    <div class="auth-container">
        <div class="auth-card" role="form" aria-label="Sign up form">
            <div class="auth-header">
                <h1 class="sofco-title">SOfCO</h1>
                <h2>Create your account</h2>
                <p>Join us today and get started!</p>
            </div>

            @if (Countries == null)
            {
                <div class="auth-footer">Loading...</div>
            }
            else
            {
                <EditForm EditContext="@editContext" OnValidSubmit="HandleSignup" OnInvalidSubmit="HandleInvalidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="name">Full Name</label>
                        <InputText id="name" @bind-Value="signupModel.Name" class="form-control" aria-label="Full name" />
                        <ValidationMessage For="@(() => signupModel.Name)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="email">Email address</label>
                        <InputText id="email" @bind-Value="signupModel.Email" class="form-control" aria-label="Email address" />
                        <ValidationMessage For="@(() => signupModel.Email)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="phone-number">Phone Number (Optional)</label>
                        <div class="row g-0">
                            <div class="col-4">
                                <div class="custom-dropdown">
                                    <div class="custom-dropdown-toggle form-control d-flex align-items-center"
                                         @onclick:stopPropagation
                                         @onclick="TogglePhoneDropdown"
                                         aria-label="Phone country code">
                                        @if (!string.IsNullOrEmpty(selectedPhoneCountryCode))
                                        {
                                            var country = Countries.FirstOrDefault(c => c.PhoneCode == selectedPhoneCountryCode);
                                            if (country != null)
                                            {
                                                <img src="@($"https://flagcdn.com/24x18/{country.Code.ToLower()}.png")" alt="@country.Name flag" class="flag-img" />
                                                <span>@selectedPhoneCountryCode</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>Select</span>
                                        }
                                    </div>
                                    @if (showPhoneDropdown)
                                    {
                                        <ul class="custom-dropdown-menu" @onclick:stopPropagation>
                                            <li><input type="text" @bind="phoneSearchQuery" @bind:event="oninput" placeholder="Search country or code..." class="search-input" @onclick:stopPropagation /></li>
                                            @foreach (var country in Countries
                                                                                .Where(c => string.IsNullOrEmpty(phoneSearchQuery) || c.Name.Contains(phoneSearchQuery, StringComparison.OrdinalIgnoreCase) || c.PhoneCode.Contains(phoneSearchQuery, StringComparison.OrdinalIgnoreCase))
                                                                                .OrderBy(c => c.PhoneCode))
                                            {
                                                <li class="custom-dropdown-item" @onclick:stopPropagation @onclick="() => SelectPhoneCountry(country.PhoneCode)">
                                                    <img src="@($"https://flagcdn.com/24x18/{country.Code.ToLower()}.png")" alt="@country.Name flag" class="flag-img" />
                                                    <span>@country.PhoneCode - @country.Name</span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                            <div class="col-8">
                                <InputText id="phone-number" @bind-Value="signupModel.PhoneNumber" class="form-control rounded-end" placeholder="Enter phone number" />
                            </div>
                        </div>
                        <ValidationMessage For="@(() => signupModel.PhoneNumber)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="date-of-birth">Date of Birth (Optional)</label>
                        <InputDate id="date-of-birth" @bind-Value="signupModel.DateOfBirth" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.DateOfBirth)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="country">Country (Optional)</label>
                        <div class="custom-dropdown">
                            <div class="custom-dropdown-toggle form-control d-flex align-items-center"
                                 @onclick:stopPropagation
                                 @onclick="ToggleCountryDropdown"
                                 aria-label="Country">
                                @if (!string.IsNullOrEmpty(signupModel.Country))
                                {
                                    var country = Countries.FirstOrDefault(c => c.Code == signupModel.Country);
                                    if (country != null)
                                    {
                                        <img src="@($"https://flagcdn.com/24x18/{country.Code.ToLower()}.png")" alt="@country.Name flag" class="flag-img" />
                                        <span>@country.Name</span>
                                    }
                                }
                                else
                                {
                                    <span>Select a country</span>
                                }
                            </div>
                            @if (showCountryDropdown)
                            {
                                <ul class="custom-dropdown-menu" @onclick:stopPropagation>
                                    <li><input type="text" @bind="countrySearchQuery" @bind:event="oninput" placeholder="Search country..." class="search-input" @onclick:stopPropagation /></li>
                                    <li class="custom-dropdown-item" @onclick:stopPropagation @onclick="@(() => SelectCountry(""))">
                                        <span>Select a country</span>
                                    </li>
                                    @foreach (var country in Countries
                                                                .Where(c => string.IsNullOrEmpty(countrySearchQuery) || c.Name.Contains(countrySearchQuery, StringComparison.OrdinalIgnoreCase))
                                                                .OrderBy(c => c.Name))
                                    {
                                        <li class="custom-dropdown-item" @onclick:stopPropagation @onclick="() => SelectCountry(country.Code)">
                                            <img src="@($"https://flagcdn.com/24x18/{country.Code.ToLower()}.png")" alt="@country.Name flag" class="flag-img" />
                                            <span>@country.Name</span>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                        <ValidationMessage For="@(() => signupModel.Country)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" type="password" @bind-Value="signupModel.Password" class="form-control" @onblur="ValidatePassword" @oninput="ValidatePassword" />
                        <ValidationMessage For="@(() => signupModel.Password)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="confirm-password">Confirm Password</label>
                        <InputText id="confirm-password" type="password" @bind-Value="signupModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => signupModel.ConfirmPassword)" class="validation-message" />
                    </div>

                    @if (isSubmitting)
                    {
                        <button type="button" class="btn btn-primary w-100 d-flex justify-content-center align-items-center opacity-75" disabled>
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            Creating Account...
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary w-100" disabled="@( !IsFormValid )">
                            Create Account
                        </button>
                    }
                </EditForm>
            }

            <p class="auth-footer">
                Already have an account? <a href="/login">Sign in</a>
            </p>
        </div>
    </div>
</div>

@code {
    private SignupModel signupModel = new();
    private EditContext editContext;
    private bool isSubmitting = false;
    private string selectedPhoneCountryCode = "+1";
    private bool showCountryDropdown = false;
    private bool showPhoneDropdown = false;
    private List<Country>? Countries;
    private string countrySearchQuery = string.Empty;
    private string phoneSearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(signupModel);
        try
        {
            var response = await Http.GetFromJsonAsync<List<Country>>("https://localhost:7062/data/countries.json");
            Countries = response ?? new List<Country>();
        }
        catch
        {
            ToastService.ShowError("Failed to load country data. Please try again.");
        }
    }

    private void ToggleCountryDropdown()
    {
        showCountryDropdown = !showCountryDropdown;
        showPhoneDropdown = false;
        countrySearchQuery = string.Empty;
    }

    private void TogglePhoneDropdown()
    {
        showPhoneDropdown = !showPhoneDropdown;
        showCountryDropdown = false;
        phoneSearchQuery = string.Empty;
    }

    private void CloseAllDropdowns()
    {
        showCountryDropdown = false;
        showPhoneDropdown = false;
    }

    private void SelectCountry(string code)
    {
        signupModel.Country = string.IsNullOrEmpty(code) ? null : code;
        showCountryDropdown = false;
        countrySearchQuery = string.Empty;
    }

    private void SelectPhoneCountry(string phoneCode)
    {
        selectedPhoneCountryCode = phoneCode;
        showPhoneDropdown = false;
        phoneSearchQuery = string.Empty;
    }

    private async Task HandleSignup()
    {
        isSubmitting = true;
        try
        {
            signupModel.FullPhoneNumber = string.IsNullOrEmpty(signupModel.PhoneNumber)
                ? null
                : $"{selectedPhoneCountryCode}{signupModel.PhoneNumber}";

            var response = await Http.PostAsJsonAsync(
                "https://localhost:7278/api/Authentication/signup",
                signupModel
            );

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Account created successfully!");
                Navigation.NavigateTo("/login");
            }
            else
            {
                ToastService.ShowError("Email Already Exists!");
                editContext.Validate(); // Revalidate to show all validation messages
            }
        }
        catch
        {
            ToastService.ShowError("An error occurred. Please try again later.");
            editContext.Validate(); // Revalidate to show all validation messages
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        ToastService.ShowError("Invalid data submitted. Please check the form and try again.");
    }

    private class SignupModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Phone(ErrorMessage = "Invalid phone number")]
        public string? PhoneNumber { get; set; }

        public string? FullPhoneNumber { get; set; }

        [DataType(DataType.Date)]
        public DateTime? DateOfBirth { get; set; }

        public string? Country { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        [PasswordComplexity]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public class PasswordComplexityAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var password = value as string;
            if (string.IsNullOrEmpty(password))
                return ValidationResult.Success!;

            bool hasUpper = password.Any(char.IsUpper);
            bool hasLower = password.Any(char.IsLower);
            bool hasDigit = password.Any(char.IsDigit);
            bool hasSpecial = password.Any(ch => !char.IsLetterOrDigit(ch));

            if (!hasUpper || !hasLower || !hasDigit || !hasSpecial)
            {
                return new ValidationResult("Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.");
            }
            return ValidationResult.Success!;
        }
    }

    private class Country
    {
        public string Code { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string PhoneCode { get; set; } = string.Empty;
    }

    private bool IsFormValid => editContext != null && !editContext.GetValidationMessages().Any();

    private void ValidatePassword()
    {
        editContext?.NotifyFieldChanged(editContext.Field(nameof(signupModel.Password)));
    }
}
